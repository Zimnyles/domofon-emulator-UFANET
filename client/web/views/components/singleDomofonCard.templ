package components

import "github.com/rvflash/elapsed"
import "strconv"
import "domofonEmulator/client/models"
import "encoding/json"


templ SingleDomofonCard(props models.Intercom) {
    @SingleDomofonCardStyle()
    {{ date := elapsed.LocalTime(props.CreatedAt, "ru") }}
    {{ doorStatusRu := ""
       if props.DoorStatus == false {
        doorStatusRu = "закрыта"
       } else {
        doorStatusRu = "открыта"
       } }}
    {{ intercomeStatusRu := ""
    if props.IntercomStatus == false {
    intercomeStatusRu = "Выключен"
    } else {
    intercomeStatusRu = "Включен"
    } }}
        <div class="domofon-card-container">
            <div class={
            templ.KV("domofon-card active", props.IntercomStatus == true ),
            templ.KV("domofon-card inactive", props.IntercomStatus!= true)} >
                <div class="card-header">
                    <span class="domofon-id">{ props.ID }</span>
                    <span class={"status-badge"}>
                            { intercomeStatusRu }
                        </span>
                        <div class="bell-and-door--wrapper">
                            @phoneIcon(props.IsCalling)
                            <div class="door-status--wrapper">
                            @doorIcon(props.DoorStatus)
                            <span class={
            templ.KV("door-status open", props.DoorStatus == true ),
            templ.KV("door-status closed", props.DoorStatus != true)}>
                                { doorStatusRu }
                            </span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="ufanet-logo">
                            <img src="/client/web/static/icons/un-logo-crop.png" class="un-logo-img" alt="ufanetlogo" />
                        </div>
                        <div class="mac-address">
                            <span class="label">MAC:</span>
                            <span class="value">{ props.MAC }</span>
                        </div>
                        <div class="address">
                            <span class="label">Адрес:</span>
                            <span class="value">{ truncateText(props.Address, 50) }</span>
                        </div>
                        <div class="createdAt">
                            {{ createdAt := props.CreatedAt }}
                            {{ createdAtStr := createdAt.Format("2006-01-02 15:04:05") }}
                            <span class="label">Создан:</span>
                            <span class="value">{ createdAtStr }</span>
                        </div>
                        <div class="updatedAt">
                            {{ updatedAt := props.UpdatedAt }}
                            {{  updatedAtStr := updatedAt.Format("2006-01-02 15:04:05") }}
                            <span class="label">Обновлен:</span>
                            <span class="value">{ updatedAtStr }</span>
                        </div>
                </div>
            
                <div class="card-footer">
                    <div class="apartments">
                        <span>{ props.NumberOfApartments } кв.</span>
                    </div>
                    <div class="created-at">
                        { date }
                    </div>
                </div>
            </div>
            <div class="domofon-controls">
                @ControlButtonStyle()
                <form hx-encoding="multipart/form-data" hx-post="/api/callIntercom" hx-target="#notification-area"
                    hx-target-error="#notification-area" hx-trigger="submit" hx-swap="innerHTML" enctype="multipart/form-data"
                    hx-on::after-request="if(event.detail.successful) this.reset()" class="control-form">
                    <div class="form-group">
                        <label for={"apartment_"+strconv.Itoa(props.ID)}>Квартира:</label>
                        <input type="number" id={"apartment_"+strconv.Itoa(props.ID)} name="call" min="1" max={
                            strconv.Itoa(props.NumberOfApartments) } required class="apartment-input">
                    </div>
                    <div class="call-control-wrapper">
                        <button type="submit" name="action" value="call" class="control-button call-button">
                            <img width="16" height="16" src="/client/web/static/icons/call-start.svg">
                            Позвонить
                        </button>
                        <button type="button" class="control-button end-call-button" hx-post="/api/endcallIntercom" hx-target="#notification-area"
                            hx-include="[name='opendoor']" hx-trigger="click" hx-swap="innerHTML">
                            <img width="16" height="16" src="/client/web/static/icons/call-end.svg" />
                            Завершить
                        </button>
                    </div>
                </form>
                <form hx-encoding="multipart/form-data" hx-post="/api/openIntercom" hx-target="#notification-area"
                    hx-target-error="#notification-area" hx-trigger="submit" hx-swap="innerHTML" enctype="multipart/form-data"
                    hx-on::after-request="if(event.detail.successful) this.reset()" class="control-form">
                    <div class="form-group">
                        <label for={"door_apartment_"+strconv.Itoa(props.ID)}>Квартира:</label>
                        <input type="number" id={"door_apartment_"+strconv.Itoa(props.ID)} name="opendoor" min="1" max={
                            strconv.Itoa(props.NumberOfApartments) } required class="apartment-input">
                    </div>
                    <div class="doorcontrol-wrapper">
                        <button type="submit" class="control-button open-button">
                            <img width="16" height="16" class="dooricon-button" src="/client/web/static/icons/door.svg" alt="Открыть" />
                            Открыть дверь
                        </button>
                    
                        <button type="button" class="control-button close-button" hx-post="/api/closeIntercom"
                            hx-target="#notification-area" hx-include="[name='opendoor']" hx-trigger="click" hx-swap="innerHTML">
                            <img width="16" height="16" class="dooricon-button" src="/client/web/static/icons/door.svg" alt="Закрыть" />
                            Закрыть дверь
                        </button>
                    </div>
                </form>
                
                     <div class="power-controls">
                    <form hx-encoding="multipart/form-data" hx-post="/api/powerIntercom" hx-target="#notification-area"
                        hx-target-error="#notification-area" hx-trigger="submit" hx-swap="innerHTML" enctype="multipart/form-data"
                        hx-on::after-request="if(event.detail.successful) { this.reset(); handlePowerToggle(event); }" class="control-form">
                        if props.IntercomStatus == true {
                            <input type="hidden" name="action" value="off" >
                        }
                        if props.IntercomStatus == false {
                            <input type="hidden" name="action" value="on">
                        }
                        <div class="power-button-wrapper">
                        <button type="submit" class={ templ.KV("control-button power-buttonON", props.IntercomStatus==true ),
                            templ.KV("control-button power-buttonOFF", props.IntercomStatus !=true)}>
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <path d="M18.36 6.64a9 9 0 1 1-12.73 0" />
                                <line x1="12" y1="2" x2="12" y2="12" />
                            </svg>
                            if props.IntercomStatus == true {
                            <span>Выключить</span>
                            } else {
                            <span>Включить⁣⁣⁣ ⁣⁣⁣⁣</span>
                            }
                        </button>
                        </div>
                    </form>
                </div>
            </div>

            {{ jsonData, err := json.Marshal(props) }}
            if err == nil {
            <div id="intercom-data" data-intercom={string(jsonData)} style="display:none;"></div>
            }
            
        </div>

}

func truncateText(text string, maxLength int) string {
    if len(text) > maxLength {
    return text[:maxLength] + "..."
    }
    return text 
}

templ doorIcon(status bool) {
if status == false {
<img width="16px" height="16px" class="dooricon" src="/client/web/static/icons/door-inactive.svg" alt="dooractive ico" />
} else {
<img width="16px" height="16px" class="dooricon" src="/client/web/static/icons/door-active.svg" alt="doorinactive ico" />
}
}

templ phoneIcon(active bool) {
<svg class="phone-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    if active {
    <path
        d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
        fill="#4CAF50" stroke="#4CAF50" />
    } else {
    <path
        d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"
        fill="none" stroke="#9e9e9e" />
    }
</svg>
}

templ ControlButtonStyle() {
    <style>
        .simulate-button-wrapper{
            display: flex;
            align-items: center;
            justify-content: center;
            width: 308px;
        }

        .power-button-wrapper{
            display: flex;
            align-items: center;
            justify-content: center;
            width: 308px;
        }
        .power-controls {
        display: flex;
        gap: 6px;
        align-items: center;
        
        }
        .delete-form {
        margin-left: auto;
        }

        .delete-button {
        background-color: #ff5252; !important;
        color: white;
        padding: 8px;
        width: auto;
        }

        .delete-button:hover {
        background-color: #d13c3c; !important;
        }

        .call-control-wrapper {
            display: flex;
            gap: 8px;
            width: 100%;
            margin-top: 8px;
        }

        .call-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.2s;
            flex: 1;
        }

        .call-button:hover {
            background-color: #3e8e41;
        }

        .end-call-button {
            background-color: #ff5252;
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.2s;
            flex: 1;
        }

        .call-control-wrapper svg {
            margin-right: 6px;
            vertical-align: middle;
        }

        .end-call-button:hover {
            background-color: #d13c3c;
        }

        .domofon-controls {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
    
        .control-form {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
    
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }
    
        .form-group label {
            font-size: 0.75rem;
            color: #555;
        }
    
        .apartment-input {
            padding: 6px 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 0.85rem;
        }
    
        .control-button {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: background-color 0.2s;
            
        }

        .doorcontrol-wrapper {
            display: flex;
            gap: 8px;
            width: 100%;
            margin-top: 8px;
        }

        .doorcontrol-wrapper button {
            flex: 1;
            min-width: 0;
            white-space: nowrap;
            padding: 8px 12px;
        }
    
    
         .open-button {
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .close-button {
            background-color: #ff5252;
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .close-button:hover {
            background-color: #d13c3c;
        }
    
        .open-button:hover {
            background-color: #0b7dda;
        }
        
        .doorcontrol-wrapper .dooricon {
            margin-right: 6px;
            vertical-align: middle;
        }
    
        .power-buttonOFF {
            width: 100%;
            background-color: #4caf50;
            color: white;
        }

        .power-buttonON {
            width: 100%;
            background-color: #ff5252;
            color: white;
        }
    
        .power-buttonOFF:hover {
            background-color: #3e8e41;
        }
        .power-buttonON:hover {
            background-color: #d13c3c;
        }

        .power-buttonOFF-sim{
            width: 100%;
            background-color: #ff8800;
            color: white;
        }
        .power-buttonOFF-sim:hover{

            background-color: #d58319;
            color: white;
        }

    </style>
}

templ SingleDomofonCardStyle() {
<style>
    .un-logo-img{
        width: 50%;
        height: auto;
        margin-bottom: 12px;
    }
    .domofon-card-container {
        display: flex;
        height: 350px;
        flex-direction: row;
        align-items: flex-start;
        gap: 20px;
        margin-bottom: 24px;
        background: #ffffff;
        border-radius: 14px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        transition: all 0.3s ease;
        border: 1px solid #e0e0e0;
    }

    .door-status--wrapper {
        display: flex;
        align-items: center;
        flex-direction: row;
        gap: 8px;
    }

    .dooricon {
        display: flex;
        align-items: center;
        width: 20px;
        height: 20px;
    }

    .bell-and-door--wrapper {
        display: flex;
        align-items: center;
        flex-direction: row;
        text-align: center;
        gap: 12px;
    }

    .phone-icon {
        vertical-align: middle;
        margin-right: 8px;
        width: 20px;
        height: 20px;
    }

    .call-indicator.calling .phone-icon {
        animation: pulse 1.5s infinite;
    }

    .domofon-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 350px;
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: all 0.2s ease;
        border: 1px solid transparent;
    }

    .domofon-card.inactive {
        border: 1px solid #ff5252;
        position: relative;
    }

    .domofon-card.active {
        border: 1px solid #4caf50;
        position: relative;
    }

    .domofon-card.active::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border-radius: 11px;
        border: 1px solid #4caf50;
        pointer-events: none;
    }

    .domofon-card.inactive::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border-radius: 11px;
        border: 1px solid #ff5252;
        pointer-events: none;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 1px solid #f0f0f0;
    }

    .domofon-id {
        font-weight: bold;
        color: #555;
        font-size: 1.2rem;
    }

    .status-badge {
        font-size: 0.9rem;
        padding: 4px 10px;
        border-radius: 14px;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-badge.active {
        background: #e3fcef;
        color: #008a45;
    }

    .status-badge.inactive {
        background: #ffebee;
        color: #d32f2f;
    }

    .status-badge.offline {
        background: #f5f5f5;
        color: #757575;
    }

    .door-status {
        font-size: 1rem;
    }

    .door-status.open {
        color: #4caf50;
    }

    .door-status.closed {
        color: #f44336;
    }

    .card-body {
        margin-bottom: 16px;
        flex-grow: 1;
        overflow: hidden;
    }

    .mac-address,
    .address {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1rem;
        margin-bottom: 12px;
    }

    .createdAt{
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1rem;
        margin-bottom: 12px;
    }

    .updatedAt{
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1rem;
        margin-bottom: 12px;
    }


    .label {
        color: #757575;
        font-weight: 500;
        font-size: 0.95rem;
    }

    .value {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 1rem;
    }

    .card-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.95rem;
        color: #757575;
    }

    .apartments {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .icon {
        margin-right: 6px;
    }
</style>
}