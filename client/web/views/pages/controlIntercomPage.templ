package pages

import "domofonEmulator/client/web/views/components"
import "domofonEmulator/client/models"
import "domofonEmulator/client/web/views/layout"
import "strconv"
import "encoding/json"

templ ControlInetcomPage(props models.Intercom) {
@layout.Layout(layout.LayoutProps{
Title: "Панель домофона",
MetaDescription: "Панель домофона",
}){
<main>
    @ControlInetcomPageStyle()
    {{ id := "domofon-card-" + strconv.Itoa(props.ID)}}
    <div id={ id }>
        @components.SingleDomofonCard(props)
    </div>
    <div class="notification-container">
        <div id="notification-area"></div>
        <div id="notification-area-2"></div>
    </div>
    @ControlIntercomScript(props)


</main>
}
}

templ ControlInetcomPageStyle() {
<style>
    * { 
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        background-color: var(--light-gray);
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
    }

    .notification-container {
        position: fixed;
        top: 20px;
        left: 20px;
        width: 300px;
        z-index: 1000;
    }

    #notification-area {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    #notification-area-2 {
        position: fixed;
        top: 20px;
        right: 20px;
        width: 320px;
        z-index: 9999;
        
    }
    .notification-area-2{
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .notification {
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        background: white;
        animation: slideIn 0.3s ease-out;
    }


    .notification.error {
        background-color: #fff5f5;
        border-left: 4px solid #ff6b6b;
    }

    .notification.success {
        margin-top: 15px;
        background-color: #2f855a;
        color: #f7fafc;
        padding: 12px 16px;
        border-radius: 6px;
        font-size: 14px;
        max-width: 350px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>
}

templ ControlIntercomScript(props models.Intercom) {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const intercomDataElem = document.getElementById("intercom-data");
            if (!intercomDataElem) return;
            const intercom = JSON.parse(intercomDataElem.dataset.intercom);
            const intercomID = intercom.id;
            function setButtonsState(isDisabled) {
                const allButtons = document.querySelectorAll('button');
                allButtons.forEach(btn => {
                    btn.disabled = isDisabled;
                    btn.style.opacity = isDisabled ? 0.5 : 1;
                    btn.style.cursor = isDisabled ? 'not-allowed' : 'pointer';
                });
                localStorage.setItem(`buttonsState_${intercomID}`, isDisabled.toString());
            }
            function updateDoorStatus(isOpen) {
                document.querySelectorAll('.dooricon').forEach(icon => {
                    icon.src = isOpen
                        ? '/client/web/static/icons/door-active.svg'
                        : '/client/web/static/icons/door-inactive.svg';
                });
                document.querySelectorAll('.door-status').forEach(text => {
                    text.textContent = isOpen ? 'открыта' : 'закрыта';
                    text.className = isOpen ? 'door-status open' : 'door-status closed';
                });
                setButtonsState(isOpen);
                localStorage.setItem(`doorStatus_${intercomID}`, isOpen.toString());
            }
            function restoreState() {
                const savedDoorStatus = localStorage.getItem(`doorStatus_${intercomID}`) === 'true';
                const savedButtonsState = localStorage.getItem(`buttonsState_${intercomID}`) === 'true';
                const doorStatus = savedDoorStatus !== null ? savedDoorStatus : intercom.DoorStatus;
                updateDoorStatus(doorStatus);
                if (savedButtonsState !== null) {
                    setButtonsState(savedButtonsState);
                }
            }
            restoreState();
            const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
            const socket = new WebSocket(`${protocol}://${window.location.host}/ws/intercom/${intercomID}`);
            socket.onmessage = function (event) {
                try {
                    const data = JSON.parse(event.data);
                    if (typeof data.door_status !== 'undefined') {
                        updateDoorStatus(data.door_status);
                    }
                } catch (e) {
                    console.error("ws message error:", e);
                }
            };
            socket.onerror = function (error) {
                console.error("ws error:", error);
            };
            window.addEventListener('beforeunload', function () {
            });
        });
    </script>


    {{ jsonData, err := json.Marshal(props) }}
    if err == nil {
    <div id="intercom-data" data-intercom={ string(jsonData) } style="display:none;"></div>
    }
    <script>
        let publishIntervalId = null;
        function isPahoLoaded() {
            return typeof Paho !== 'undefined' &&
                typeof Paho.MQTT !== 'undefined' &&
                typeof Paho.MQTT.Client !== 'undefined';
        }
        function loadPahoFallback() {
            return new Promise((resolve) => {
                if (isPahoLoaded()) {
                    resolve();
                    return;
                }
                const script = document.createElement('script');
                script.src = "https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js";
                script.onload = () => {
                    if (isPahoLoaded()) {
                        resolve();
                    } else {
                        showError();
                    }
                };
                script.onerror = () => {
                    showError();
                };
                document.head.appendChild(script);
            });
        }

        function showError() {
            showNotification(``, 'error', 15000);
        }

        function showNotification(message, type = "info") {
                const notificationArea = document.getElementById('notification-area-2');
                if (!notificationArea) return;

                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.innerHTML = message;
                notificationArea.appendChild(notification);

                setTimeout(() => {
                    notification.style.opacity = '0';
                    setTimeout(() => notification.remove(), 50); 
                }, 3000);
            }

        let intercomData = null;

        function loadInitialIntercomData() {
            const dataElement = document.getElementById('intercom-data');
            if (dataElement && dataElement.dataset.intercom) {
                try {
                    intercomData = JSON.parse(dataElement.dataset.intercom);
                } catch (e) {
                    showNotification("Ошибка обработки данных", "error");
                    intercomData = null;
                }
            }
        }

        function updateIntercomState(newState) {
            if (!intercomData) {
                intercomData = {};
            }
            intercomData = { ...intercomData, ...newState };
        }

        const mqttConfig = {
            brokerHost: "127.0.0.1",
            brokerPort: 8083,
            clientId: "client-" + Math.random().toString(16).substr(2, 8),
            topic: "intercom/status/" + {{ props.ID }},
        interval: 30000
            };

        let mqttClient = null;

        function initMqttClient() {
            const brokerUrl = `ws://${mqttConfig.brokerHost}:${mqttConfig.brokerPort}/mqtt`;
            mqttClient = new Paho.MQTT.Client(brokerUrl, mqttConfig.clientId);

            mqttClient.onConnectionLost = (response) => {
                console.error("Соединение потеряно:", response.errorMessage);
                showNotification("Потеряно соединение с MQTT", "error");
            };

            mqttClient.connect({
                onSuccess: () => {
                    console.log("Успешное подключение к MQTT");
                    showNotification("Подключено к MQTT", "success");
                    startPublishing();
                },
                onFailure: (err) => {
                    console.error("Ошибка подключения:", err);
                    showNotification("Ошибка подключения к MQTT", "error");
                },
            });
        }

        function startPublishing() {
                if (intercomData && mqttClient && mqttClient.isConnected()) {
                    const message = new Paho.MQTT.Message(
                        JSON.stringify(intercomData)
                    );
                    message.destinationName = mqttConfig.topic;
                    mqttClient.send(message);
                    showNotification("Сообщение о статусе домофона отправлено", "success");
                }

                publishIntervalId = setInterval(() => {
                    if (intercomData && mqttClient && mqttClient.isConnected()) {
                        const message = new Paho.MQTT.Message(
                            JSON.stringify(intercomData)
                        );
                        message.destinationName = mqttConfig.topic;
                        mqttClient.send(message);
                        showNotification("Сообщение о статусе домофона отправлено", "success");
                    }
                }, mqttConfig.interval);
            }


        document.addEventListener('DOMContentLoaded', async () => {
            if (!isPahoLoaded()) {
                console.warn('Paho not loaded, trying fallback...');
                await loadPahoFallback();
            }
            if (isPahoLoaded()) {
                loadInitialIntercomData();
                initMqttClient();
            } else {
                showError();
                document.querySelectorAll('button').forEach(btn => btn.disabled = true);
            }
        });
    </script>
}