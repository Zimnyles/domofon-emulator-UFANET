package pages

import "domofonEmulator/client/web/views/layout"

templ CreateIntercomePage() {
    @layout.Layout(layout.LayoutProps{
    Title: "DomofonPanel",
    MetaDescription: "DomofonPanel",
    }){
        <main>
            @CreateIntercomePageStyle()
            <div class="title-text">Добавление нового домофона</div>
            <form hx-encoding="multipart/form-data" hx-post="/api/createIntercom" enctype="multipart/form-data"
             hx-target="#post-result" hx-target-error="#post-result" hx-trigger="submit" hx-swap="innerHTML swap:1s" hx-on::after-request="if(event.detail.successful) this.reset()">
                <div class="form-group">
                    <label for="mac">MAC-адрес:</label>
                    <div class="mac-group">
                        <input type="text" id="mac" name="mac" placeholder="XX:XX:XX:XX:XX:XX" required>
                        <button type="button" onclick="generateMAC()">Сгенерировать</button>
                    </div>
                </div>
            
                <div class="form-group">
                    <label for="address">Адрес установки:</label>
                    <input type="text" id="address" name="address" required>
                </div>
            
                <div class="form-group">
                    <label for="apartments">Количество квартир:</label>
                    <input type="number" id="apartments" name="apartments" min="1" required>
                </div>
            
                <button type="submit">Создать домофон</button>
            </form>
            <div id="post-result"></div>
        </main>


    }
}

templ CreateIntercomePageStyle() {
<style>
    body {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;

    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    .title-text{
        font-size: 36px;
        margin-bottom: 15px;
    }

    input[type="text"],
    input[type="number"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button {
        background-color: rgb(59, 59, 59);
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }

    button:hover {
        background-color: rgb(68, 68, 68);
    }

    .mac-group {
        display: flex;
        gap: 10px;
    }

    .mac-group input {
        flex: 1;
    }

    .mac-group button {
        width: auto;
    }
</style>
<script>
    function generateMAC() {
        const hexDigits = "0123456789ABCDEF";
        let mac = "";
        for (let i = 0; i < 6; i++) {
            mac += hexDigits.charAt(Math.floor(Math.random() * 16));
            mac += hexDigits.charAt(Math.floor(Math.random() * 16));
            if (i < 5) mac += ":";
        }
        const firstByte = parseInt(mac.substring(0, 2), 16);
        const newFirstByte = (firstByte | 0x02) & 0xFE;
        const newFirstHex = newFirstByte.toString(16).padStart(2, '0').toUpperCase();
        document.getElementById("mac").value = newFirstHex + mac.substring(2);
    }
</script>
}