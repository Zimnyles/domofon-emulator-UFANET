// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"domofonEmulator/server/models"
	"domofonEmulator/server/web/views/layout"
)

func LiveIntercomPage(intercom models.Intercom, login string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<main class=\"live-intercom-container\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = LiveIntercomStyles().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			login := ctx.Value("login").(string)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"header-login\"><span>Добрый день, ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(login)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 17, Col: 66}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "!</span><a class=\"logoutlink\" hx-trigger=\"click\" hx-get=\"/api/logout\">Выйти</a></div><div class=\"header\"><h1>Вы управляете домофоном ID:")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 19, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</h1><div class=\"connection-status\" id=\"connection-status\"><span class=\"status-dot\"></span> <span class=\"status-text\">Подключение...</span></div></div><div class=\"intercom-data\" id=\"intercom-data\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = IntercomInfoCard(intercom).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div><div class=\"text-info-wrapper\"><p>Каждый раз, когда домофон изменяет свое состояние, он отпровляет свои данные на сервер. <span style=\"color: green;\">Данные актуальны и обновляются в реальном времени!</span></p></div><div class=\"intercom-data\" id=\"intercom-data\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = IntercomActualStatusCard(intercom).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</div><div class=\"text-info-wrapper\"><p>Домофон отправляет данные о себе раз в 30 секунд. Ниже представлены данные, отправленные домофоном в последний раз.</p><p>Если домофон не выходит на связь более 2х минут, то он помечается как неактивный. <span style=\"color: red;\">Будьте аккуратны, данные могут быть неактуальны!</span></p></div><div class=\"intercom-data\" id=\"intercom-data\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = IntercomStatusCard(intercom).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div><div class=\"notification-area\" id=\"notification-area\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = MqttServerScript(intercom).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</main>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layout.Layout(layout.LayoutProps{
			Title:           "Онлайн контроль домофона",
			MetaDescription: "Онлайн контроль домофона",
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func IntercomInfoCard(intercom models.Intercom) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<div class=\"info-card\"><div class=\"status-row\"><span class=\"label\">Адрес:</span> <span class=\"value\" id=\"address-status\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.Address)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 51, Col: 66}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</span></div><div class=\"status-row\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		createdAt := intercom.CreatedAt
		createdAtStr := createdAt.Format("2006-01-02 15:04:05")
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<span class=\"label\">Создан:</span> <span class=\"value\" id=\"created-status\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(createdAtStr)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 57, Col: 62}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</span></div><div class=\"status-row\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		updatedAt := intercom.UpdatedAt
		updatedAtStr := updatedAt.Format("2006-01-02 15:04:05")
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<span class=\"label\">Обновлен:</span> <span class=\"value\" id=\"update-status\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(updatedAtStr)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 63, Col: 61}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</span></div><div class=\"status-row\"><span class=\"label\">MAC:</span> <span class=\"value\" id=\"mac-address\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.MAC)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 67, Col: 59}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</span></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func IntercomActualStatusCard(intercom models.Intercom) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<div class=\"status-card\"><div class=\"status-row\"><span class=\"label\">Состояние:</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IntercomStatus {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<span class=\"value-on\" id=\"intercom-status-main\">Включен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<span class=\"value-off\" id=\"intercom-status-main\">Выключен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</div><div class=\"status-row\"><span class=\"label\">Дверь:</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.DoorStatus {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "<span class=\"value-on\" id=\"door-status-main\">Открыта</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<span class=\"value-off\" id=\"door-status-main\">Закрыта</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</div><div class=\"status-row\"><span class=\"label\">Вызов:</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IsCalling {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "<span class=\"value-on\" id=\"call-status-main\">Активен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "<span class=\"value-off\" id=\"call-status-main\">Нет</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "</div></div><div class=\"status-card\"><div class=\"status-row\"><span class=\"label\"></span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IntercomStatus {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<span class=\"value-on\" id=\"intercom-status-extra\"></span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<span class=\"value-off\" id=\"intercom-status-extra\"></span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "</div><div class=\"status-row\"><span class=\"label\">Ключ от квартиры:</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.DoorStatus {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "<span class=\"value-on\" id=\"doorkey-status-extra\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.OpenedDoorApartment)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 112, Col: 87}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "<span class=\"value-off\" id=\"doorkey-status-extra\">Закрыта</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "</div><div class=\"status-row\"><span class=\"label\">Звонок в квартиру:</span> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IsCalling {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "<span class=\"value-on\" id=\"callkey-status-extra\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.CalledApartment)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 120, Col: 83}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "<span class=\"value-off\" id=\"callkey-status-extra\">Нет</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "</div></div><div class=\"action-buttons-wrapper\"><div class=\"action-buttons\"><form hx-post=\"/api/opendoorIntercom\" hx-target=\"#intercom-response-container\" hx-swap=\"innerHTML\" style=\"display: inline;\" id=\"open-door-form\"><input type=\"hidden\" name=\"intercom_id\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 131, Col: 71}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "\"> <button type=\"submit\" class=\"open-button\" id=\"open-door-btn\"><img width=\"16\" height=\"16\" class=\"dooricon\" src=\"/server/web/static/icons/door.svg\" alt=\"Открыть\"> Открыть дверь</button></form></div><div class=\"action-buttons\"><form hx-post=\"/api/closedoorIntercom\" hx-target=\"#intercom-response-container\" hx-swap=\"innerHTML\" style=\"display: inline;\" id=\"close-door-form\"><input type=\"hidden\" name=\"intercom_id\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(intercom.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 141, Col: 71}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, "\"> <button type=\"submit\" class=\"off-button\" id=\"close-door-btn\" disabled><img width=\"16\" height=\"16\" class=\"dooricon\" src=\"/server/web/static/icons/door.svg\" alt=\"Закрыть\"> Закрыть дверь</button></form></div><div id=\"intercom-response-container\"></div></div><script>\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n        const openForm = document.getElementById('open-door-form');\r\n        const closeForm = document.getElementById('close-door-form');\r\n        const openBtn = document.getElementById('open-door-btn');\r\n        const closeBtn = document.getElementById('close-door-btn');\r\n        if (openForm && closeForm) {\r\n            openForm.addEventListener('htmx:afterRequest', function (evt) {\r\n                if (evt.detail.successful) {\r\n                    closeBtn.disabled = false;\r\n                    openBtn.disabled = true;\r\n                    closeBtn.classList.remove('disabled-btn');\r\n                    openBtn.classList.add('disabled-btn');\r\n                }\r\n            });\r\n            closeForm.addEventListener('htmx:afterRequest', function (evt) {\r\n                if (evt.detail.successful) {\r\n                    openBtn.disabled = false;\r\n                    closeBtn.disabled = true;\r\n                    openBtn.classList.remove('disabled-btn');\r\n                    closeBtn.classList.add('disabled-btn');\r\n                }\r\n            });\r\n        }\r\n    });\r\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func IntercomStatusCard(intercom models.Intercom) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var15 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var15 == nil {
			templ_7745c5c3_Var15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 39, "<div class=\"status-card\"><div class=\"status-row\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IntercomStatus == true {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 40, "<span class=\"label\">Состояние:</span> <span class=\"value-on\" id=\"intercom-status\">Включен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 41, "<span class=\"label\">Состояние:</span> <span class=\"value-off\" id=\"intercom-status\">Выключен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 42, "</div><div class=\"status-row\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.DoorStatus == true {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 43, "<span class=\"label\">Дверь:</span> <span class=\"value-on\" id=\"door-status\">Открыта</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 44, "<span class=\"label\">Дверь:</span> <span class=\"value-off\" id=\"door-status\">Закрыта</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 45, "</div><div class=\"status-row\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IsCalling == true {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 46, "<span class=\"label\">Вызов:</span> <span class=\"value-on\" id=\"call-status\">Активен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 47, "<span class=\"label\">Вызов:</span> <span class=\"value-off\" id=\"call-status\">Нет</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 48, "</div></div><div class=\"status-row\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if intercom.IsActive == true {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 49, "<span class=\"label\">Активность:</span> <span class=\"value-on\" id=\"intercomactive-status\">Активен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 50, "<span class=\"label\">Активность:</span> <span class=\"value-off\" id=\"intercomactive-status\">Неактивен</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 51, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MqttServerScript(intercom models.Intercom) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var16 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var16 == nil {
			templ_7745c5c3_Var16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 52, "<script>\r\n        const intercomID = ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var17, templ_7745c5c3_Err := templruntime.ScriptContentOutsideStringLiteral(intercom.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `server/web/views/pages/liveIntercomPage.templ`, Line: 227, Col: 41}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var17)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 53, ";\r\n\r\n        const wsProtocol = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\r\n        const wsBase = `${wsProtocol}://${window.location.host}`;\r\n\r\n        const statusSocket = new WebSocket(`${wsBase}/ws/intercom/status/${intercomID}`);\r\n        const actualStatusSocket = new WebSocket(`${wsBase}/ws/intercom/actualstatus/${intercomID}`);\r\n        const activeStatusSocket = new WebSocket(`${wsBase}/ws/intercom/activestatus/${intercomID}`);\r\n        activeStatusSocket.onopen = () => {\r\n                updateConnectionStatus(true);\r\n                showNotification('Подключено к intercom/activestatus', 'success');\r\n        };\r\n        activeStatusSocket.onerror = (error) => {\r\n                console.error(\"Ошибка Ws:\", error);\r\n        };\r\n        activeStatusSocket.onclose = () => {\r\n                updateConnectionStatus(false);\r\n                console.warn(\"intercom/activestatus отключен\");\r\n        };\r\n        statusSocket.onopen = () => {\r\n            updateConnectionStatus(true);\r\n            showNotification('Подключено к intercom/status', 'success');\r\n        };\r\n        statusSocket.onclose = () => {\r\n            updateConnectionStatus(false);\r\n            showNotification('intercom/status отключен', 'error');\r\n            setTimeout(() => location.reload(), 5000);\r\n        };\r\n        statusSocket.onerror = (error) => console.error(\"Ошибка WebSocket (status):\", error);\r\n\r\n        statusSocket.onmessage = function (event) {\r\n            try {\r\n                const msg = JSON.parse(event.data);\r\n                console.log(\"WebSocket statusSocket message received:\", msg);\r\n                console.log( msg.activestatus );\r\n                if (msg.activestatus) updateIntercomStatus(msg.activestatus);\r\n            } catch (e) {\r\n            }\r\n        };\r\n\r\n        activeStatusSocket.onmessage = function (event) {\r\n                try {\r\n                    const msg = JSON.parse(event.data);\r\n                    console.log(\"WebSocket activeStatusSocket message received:\", msg);\r\n                    if (msg.activestatus && typeof msg.activestatus.is_active !== 'undefined') {\r\n                        updateActiveStatus(msg.activestatus.is_active);\r\n                        return;\r\n                    }\r\n                    if (typeof msg.is_active !== 'undefined') {\r\n                        updateActiveStatus(msg.is_active);\r\n                        return;\r\n                    }\r\n                } catch (e) {\r\n                    console.error(\"ws error:\", e, \"Raw data:\", event.data);\r\n                }\r\n            };\r\n        function updateActiveStatus(isActive) {\r\n            const statusEl = document.getElementById('intercomactive-status');\r\n            if (!statusEl) {\r\n                console.error(\"Element 'intercomactive-status' not found\");\r\n                return;\r\n            }\r\n            statusEl.textContent = isActive ? 'Активен' : 'Неактивен';\r\n            statusEl.className = isActive ? 'value-on' : 'value-off';\r\n            console.log(\"Active status updated to:\", isActive);\r\n        }\r\n\r\n    actualStatusSocket.onopen = () => {\r\n        showNotification('Подключено к intercom/actualstatus', 'success');\r\n    };\r\n    actualStatusSocket.onclose = () => {\r\n        showNotification('intercom/actualstatus отключен', 'error');\r\n    };\r\n    actualStatusSocket.onerror = (error) => console.error(\"Ошибка Ws:\", error);\r\n\r\n    actualStatusSocket.onmessage = function (event) {\r\n        try {\r\n            const msg = JSON.parse(event.data);\r\n            console.log(\"WebSocket actualstatusSocket message received:\", msg);\r\n            if (msg.actualstatus) updateIntercomActualStatus(msg.actualstatus);\r\n        } catch (e) {\r\n            console.error(\"Ошибка Ws:\", e);\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    function updateIntercomStatus(data) {\r\n        const intercomEl = document.getElementById('intercom-status');\r\n        intercomEl.textContent = data.intercom_status === true ? 'Включен' : 'Выключен';\r\n        intercomEl.style.color = data.intercom_status === true ? 'green' : 'red';\r\n\r\n        const doorEl = document.getElementById('door-status');\r\n        doorEl.textContent = data.door_status === true ? 'Открыта' : 'Закрыта';\r\n        doorEl.style.color = data.door_status === true ? 'green' : 'red';\r\n\r\n        const callEl = document.getElementById('call-status');\r\n        callEl.textContent = data.is_calling === true ? 'Активен' : 'Нет';\r\n        callEl.style.color = data.is_calling === true ? 'green' : 'red';\r\n\r\n        const updatedAtEl = document.getElementById('update-status');\r\n        if (data.updated_at) {\r\n            const date = new Date(data.updated_at);\r\n            const formatted = date.toLocaleString('ru-RU', {\r\n                year: 'numeric',\r\n                month: '2-digit',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit'\r\n            });\r\n            updatedAtEl.textContent = formatted;\r\n        } else {\r\n            updatedAtEl.textContent = '';\r\n        }\r\n\r\n        document.getElementById('mac-address').textContent = data.mac_address || '';\r\n    }\r\n\r\n    function updateIntercomActualStatus(data) {\r\n        \r\n            document.getElementById(\"intercom-status-main\").className = data.intercom_status ? \"value-on\" : \"value-off\";\r\n            document.getElementById(\"intercom-status-main\").textContent = data.intercom_status ? \"Включен\" : \"Выключен\";\r\n\r\n            document.getElementById(\"door-status-main\").className = data.door_status ? \"value-on\" : \"value-off\";\r\n            document.getElementById(\"door-status-main\").textContent = data.door_status ? \"Открыта\" : \"Закрыта\";\r\n\r\n            document.getElementById(\"call-status-main\").className = data.is_calling ? \"value-on\" : \"value-off\";\r\n            document.getElementById(\"call-status-main\").textContent = data.is_calling ? \"Активен\" : \"Нет\";\r\n\r\n            document.getElementById(\"doorkey-status-extra\").className = data.door_status ? \"value-on\" : \"value-off\";\r\n            document.getElementById(\"doorkey-status-extra\").textContent = data.door_status ? data.OpenedDoorApartment : \"Закрыта\";\r\n\r\n            document.getElementById(\"callkey-status-extra\").className = data.is_calling ? \"value-on\" : \"value-off\";\r\n            document.getElementById(\"callkey-status-extra\").textContent = data.is_calling ? data.CalledApartment : \"Нет\";\r\n        }\r\n    function updateConnectionStatus(isConnected) {\r\n        const statusElem = document.getElementById('connection-status');\r\n        const dotElem = statusElem.querySelector('.status-dot');\r\n        const textElem = statusElem.querySelector('.status-text');\r\n\r\n        if (isConnected) {\r\n            dotElem.style.backgroundColor = '#4CAF50';\r\n            textElem.textContent = 'Подключено';\r\n        } else {\r\n            dotElem.style.backgroundColor = '#F44336';\r\n            textElem.textContent = 'Отключено';\r\n        }\r\n    }\r\n    function showNotification(message, type) {\r\n        const container = document.getElementById('notification-area');\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification ${type}`;\r\n        notification.textContent = message;\r\n        container.appendChild(notification);\r\n        setTimeout(() => notification.remove(), 5000);\r\n    }\r\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LiveIntercomStyles() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var18 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var18 == nil {
			templ_7745c5c3_Var18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 54, "<style>\r\n    * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    }\r\n    .action-buttons-wrapper{\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin-left: 10px;\r\n        justify-content: flex-end;\r\n    }\r\n    .action-buttons {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        margin-top: 15px;\r\n        margin-left: 10px;\r\n    }\r\n    .open-button {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        padding: 8px 16px;\r\n        background-color: #4CAF50;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 4px;\r\n        font-weight: 500;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n    }\r\n\r\n    .off-button {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        padding: 8px 16px;\r\n        background-color: rgb(255, 61, 61);\r\n        color: white;\r\n        border: none;\r\n        border-radius: 4px;\r\n        font-weight: 500;\r\n        cursor: pointer;\r\n        transition: background-color 0.3s;\r\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n    }\r\n    .open-button:disabled,\r\n    .off-button:disabled {\r\n        opacity: 0.6;\r\n        cursor: not-allowed;\r\n        background-color: #cccccc;\r\n    }   \r\n\r\n    .open-button:not(:disabled),\r\n    .off-button:not(:disabled) {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .logoutlink{\r\n        text-decoration:underline;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .off-button:disabled {\r\n        opacity: 0.6;\r\n        cursor: not-allowed;\r\n        background-color: #cccccc;\r\n    }\r\n    \r\n    .disabled-btn {\r\n        pointer-events: none;\r\n    }\r\n    .open-button:hover {\r\n        background-color: #3e8e41;\r\n    }\r\n    .live-intercom-container {\r\n        max-width: 1020px;\r\n        margin: 0 auto;\r\n        padding: 20px;\r\n    }\r\n    .text-info-wrapper{\r\n        margin-top: 15px;\r\n        margin-bottom: 15px;\r\n        font-size: 0.9rem;\r\n        color: #555;\r\n    }\r\n    .header-login{\r\n        font-size: 0.9rem;\r\n        color: #555;\r\n        margin-bottom: 10px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n    }\r\n    .header {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 15px;\r\n    }\r\n\r\n    .connection-status {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n    }\r\n\r\n    .status-dot {\r\n        width: 12px;\r\n        height: 12px;\r\n        border-radius: 50%;\r\n        background-color: #FFC107;\r\n    }\r\n\r\n    .status-text {\r\n        font-size: 0.9rem;\r\n        color: #555;\r\n    }\r\n\r\n    .intercom-data {\r\n        display: flex;\r\n        flex-direction: column;\r\n        background: white;\r\n        border-radius: 8px;\r\n        padding: 20px;\r\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n        gap: 10px;\r\n        margin-bottom: 45px;\r\n    }\r\n\r\n    .status-card {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n        gap: 20px;\r\n        \r\n    }\r\n\r\n    .status-row {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        padding: 10px 0;\r\n        border-bottom: 1px solid #eee;\r\n    }\r\n\r\n    .label {\r\n        font-weight: 500;\r\n        color: #666;\r\n    }\r\n\r\n    .value {\r\n        font-weight: 600;\r\n    }\r\n\r\n    .value-off{\r\n        font-weight: 600;\r\n        color: red;\r\n    }\r\n\r\n    .value-on{\r\n        font-weight: 600;\r\n        color: green;\r\n    }\r\n\r\n    .notification-area {\r\n        position: fixed;\r\n        bottom: 20px;\r\n        right: 20px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 10px;\r\n        z-index: 1000;\r\n    }\r\n\r\n    .notification {\r\n        padding: 12px 16px;\r\n        border-radius: 4px;\r\n        color: white;\r\n        animation: slideIn 0.3s ease-out;\r\n    }\r\n\r\n    .notification.success {\r\n        background: #4CAF50;\r\n    }\r\n\r\n    .notification.error {\r\n        background: #F44336;\r\n    }\r\n</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
